version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: bookclub-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bookclub}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - bookclub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./bookclub-v1
      dockerfile: Dockerfile
      target: production
    container_name: bookclub-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3004
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB:-bookclub}
    networks:
      - bookclub-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3004/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./bookclub-frontend
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3004}
    container_name: bookclub-frontend-prod
    restart: always
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - bookclub-network
    depends_on:
      - backend
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:80",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: bookclub-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - bookclub-network
    depends_on:
      - frontend
      - backend
    profiles:
      - with-proxy

networks:
  bookclub-network:
    driver: bridge

volumes:
  postgres_data_prod:
